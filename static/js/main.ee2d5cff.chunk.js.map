{"version":3,"sources":["assets/logo.png","pages/Login/Login.js","utils/data/index.js","components/Advantages/Advantages.js","assets/user.png","components/AppBar/AppBar.js","components/Descriptions/Descriptions.js","components/Instrctions/Instructions.js","components/PoseSelector/PoseSelector.js","utils/music/count.wav","utils/pose_images/chair.jpg","utils/pose_images/cobra.jpg","utils/pose_images/dog.jpg","utils/pose_images/shoulderstand.jpg","utils/pose_images/traingle.jpg","utils/pose_images/index.js","utils/pose_images/tree.jpg","utils/pose_images/warrior.jpg","pages/Yoga/Yoga.js","utils/helper/index.js","App.js","reportWebVitals.js","index.js"],"names":["Login","username","setUsername","useState","password","setPassword","error","setError","navigate","useNavigate","_jsxs","className","children","_jsx","src","userImage","alt","onSubmit","e","preventDefault","htmlFor","type","id","value","onChange","target","required","poseInstructions","Tree","Cobra","Dog","Chair","Warrior","Traingle","Shoulderstand","poseAdvantages","poseDescriptions","POINTS","NOSE","LEFT_EYE","RIGHT_EYE","LEFT_EAR","RIGHT_EAR","LEFT_SHOULDER","RIGHT_SHOULDER","LEFT_ELBOW","RIGHT_ELBOW","LEFT_WRIST","RIGHT_WRIST","LEFT_HIP","RIGHT_HIP","LEFT_KNEE","RIGHT_KNEE","LEFT_ANKLE","RIGHT_ANKLE","keypointConnections","nose","left_ear","right_ear","left_shoulder","right_shoulder","left_elbow","right_elbow","left_hip","right_hip","left_knee","right_knee","Advantages","_ref","currentPose","advantages","setAdvantages","map","instruction","AppBar","onLogout","dropdownOpen","setDropdownOpen","selectedValue","setSelectedValue","onClick","handleToggleDropdown","prev","FaUserCircle","handleLogout","FaPowerOff","Descriptions","descriptions","setDescriptions","description","Instructions","instructions","setInsntructions","poseNames","Triangle","PoseSelector","poseList","setCurrentPose","pose","poseImages","cobra","dog","chair","traingle","shoulderstand","interval","skeletonColor","flag","Yoga","webcamRef","useRef","canvasRef","startingTime","setStartingTime","currentTime","setCurrentTime","poseTime","setPoseTime","bestPerform","setBestPerform","isStartPose","setIsStartPose","useEffect","timeDiff","CLASS_NO","No_Pose","get_center_point","landmarks","left_bodypart","right_bodypart","left","tf","right","normalize_pose_landmarks","pose_center","pose_size","torso_size_multiplier","arguments","length","undefined","hips_center","shoulders_center","torso_size","pose_center_new","d","max_dist","get_pose_size","detectPose","async","detector","poseClassifier","countAudio","current","video","readyState","notDetected","estimatePoses","ctx","getContext","clearRect","width","height","keypoints","input","keypoint","score","name","x","y","r","color","beginPath","arc","Math","PI","fillStyle","fill","drawPoint","connections","forEach","connection","conName","toUpperCase","_ref2","mx","my","tx","ty","moveTo","lineTo","lineWidth","strokeStyle","stroke","drawSegment","err","processedInput","predict","array","then","data","classNo","console","log","play","Date","getTime","pause","window","location","href","toFixed","Webcam","ref","style","position","top","padding","clearInterval","detectorConfig","modelType","poseDetection","SINGLEPOSE_THUNDER","MoveNet","Audio","count","loop","setInterval","runMovenet","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee2d5cff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.ec888453.png\";","// src/pages/Login/Login.js\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\r\nimport userImage from \"../../assets/logo.png\";\r\nimport \"./Login.css\"; // Create this CSS file for styling\r\n\r\nconst Login = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const hardcodedUsername = \"Sheromi\";\r\n  const hardcodedPassword = \"Sheromi123\";\r\n\r\n  const navigate = useNavigate(); // Initialize navigate\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    if (username === hardcodedUsername && password === hardcodedPassword) {\r\n      setError(\"\");\r\n      navigate(\"/start\"); // Navigate to /start on successful login\r\n    } else {\r\n      setError(\"Invalid username or password\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <img src={userImage} alt=\"User\" className=\"user-image\" /> <h2>Login</h2>\r\n      {/* User image */}\r\n      <form onSubmit={handleLogin}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"username\">Username:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password\">Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        <div className=\"button-container\">\r\n          {\" \"}\r\n          {/* Added wrapper for button */}\r\n          <button type=\"submit\" className=\"login-button\">\r\n            Login\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","export const poseInstructions = {\r\n  Tree: [\r\n    \"Stand tall and place one foot on the inner thigh of your opposite leg. Bring your hands together at your chest or raise them overhead, balancing on one leg.\",\r\n  ],\r\n  Cobra: [\r\n    \"Lie face down, legs extended. Place your hands under your shoulders and gently lift your chest using your back muscles. Keep your elbows slightly bent.\",\r\n  ],\r\n  Dog: [\r\n    \"Start on all fours. Lift your hips up and back, forming an inverted V-shape. Press your heels toward the ground and lengthen your spine.\",\r\n  ],\r\n  Chair: [\r\n    \"Stand tall, feet together. Bend your knees as if sitting in a chair, keeping your arms raised and back straight. Hold for a few breaths.\",\r\n  ],\r\n  Warrior: [\r\n    \"Step one foot forward into a lunge, with the back foot at an angle. Extend your arms overhead or out to the sides and bend the front knee.\",\r\n  ],\r\n  Traingle: [\r\n    \"Stand with your feet wide apart. Extend your arms and lean sideways, placing one hand near your ankle while reaching the other arm up. Keep your chest open.\",\r\n  ],\r\n  Shoulderstand: [\r\n    \"Lie on your back and lift your legs overhead. Use your hands to support your lower back and aim to align your legs vertically.\",\r\n  ],\r\n};\r\n\r\nexport const poseAdvantages = {\r\n  Tree: [\r\n    \"Enhances balance, concentration, and posture. Strengthens the legs, thighs, and spine. Can improve mental focus and is calming for the mind.\",\r\n  ],\r\n  Cobra: [\r\n    \"Strengthens the spine, improves posture, and helps alleviate stress and fatigue. It also opens up the chest and lungs, which can be beneficial for breathing.\",\r\n  ],\r\n  Dog: [\r\n    \"Stretches the hamstrings, calves, and spine. Strengthens the arms and legs, improves circulation, and calms the mind. It is also known to relieve back pain.\",\r\n  ],\r\n  Chair: [\r\n    \"Strengthens the legs, ankles, and core. Enhances stability and stamina, and helps improve focus.\",\r\n  ],\r\n  Warrior: [\r\n    \"Strengthens the legs, arms, and core. Increases stamina and endurance, and improves focus and balance.\",\r\n  ],\r\n  Traingle: [\r\n    \"Stretches and strengthens the legs, knees, and ankles. Opens the chest and shoulders and can aid in digestion. Helps relieve stress and anxiety.\",\r\n  ],\r\n  Shoulderstand: [\r\n    \"Improves blood circulation, strengthens the shoulders and neck, and helps calm the mind. Often used to relieve symptoms of anxiety and insomnia.\",\r\n  ],\r\n};\r\n\r\nexport const poseDescriptions = {\r\n  Tree: [\r\n    \"Enhances balance, concentration, and posture. Strengthens the legs, thighs, and spine. Can improve mental focus and is calming for the mind.\",\r\n  ],\r\n  Cobra: [\r\n    \"Strengthens the spine, improves posture, and helps alleviate stress and fatigue. It also opens up the chest and lungs, which can be beneficial for breathing.\",\r\n  ],\r\n  Dog: [\r\n    \"Stretches the hamstrings, calves, and spine. Strengthens the arms and legs, improves circulation, and calms the mind. It is also known to relieve back pain.\",\r\n  ],\r\n  Chair: [\r\n    \"Strengthens the legs, ankles, and core. Enhances stability and stamina, and helps improve focus.\",\r\n  ],\r\n  Warrior: [\r\n    \"Strengthens the legs, arms, and core. Increases stamina and endurance, and improves focus and balance.\",\r\n  ],\r\n  Traingle: [\r\n    \"Stretches and strengthens the legs, knees, and ankles. Opens the chest and shoulders and can aid in digestion. Helps relieve stress and anxiety.\",\r\n  ],\r\n  Shoulderstand: [\r\n    \"Improves blood circulation, strengthens the shoulders and neck, and helps calm the mind. Often used to relieve symptoms of anxiety and insomnia.\",\r\n  ],\r\n};\r\n\r\nexport const POINTS = {\r\n  NOSE: 0,\r\n  LEFT_EYE: 1,\r\n  RIGHT_EYE: 2,\r\n  LEFT_EAR: 3,\r\n  RIGHT_EAR: 4,\r\n  LEFT_SHOULDER: 5,\r\n  RIGHT_SHOULDER: 6,\r\n  LEFT_ELBOW: 7,\r\n  RIGHT_ELBOW: 8,\r\n  LEFT_WRIST: 9,\r\n  RIGHT_WRIST: 10,\r\n  LEFT_HIP: 11,\r\n  RIGHT_HIP: 12,\r\n  LEFT_KNEE: 13,\r\n  RIGHT_KNEE: 14,\r\n  LEFT_ANKLE: 15,\r\n  RIGHT_ANKLE: 16,\r\n};\r\n\r\nexport const keypointConnections = {\r\n  nose: [\"left_ear\", \"right_ear\"],\r\n  left_ear: [\"left_shoulder\"],\r\n  right_ear: [\"right_shoulder\"],\r\n  left_shoulder: [\"right_shoulder\", \"left_elbow\", \"left_hip\"],\r\n  right_shoulder: [\"right_elbow\", \"right_hip\"],\r\n  left_elbow: [\"left_wrist\"],\r\n  right_elbow: [\"right_wrist\"],\r\n  left_hip: [\"left_knee\", \"right_hip\"],\r\n  right_hip: [\"right_knee\"],\r\n  left_knee: [\"left_ankle\"],\r\n  right_knee: [\"right_ankle\"],\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { poseAdvantages } from \"../../utils/data\";\r\n\r\nimport \"./Advantages.css\";\r\n\r\nexport default function Advantages({ currentPose }) {\r\n  const [advantages, setAdvantages] = useState(poseAdvantages);\r\n\r\n  return (\r\n    <div>\r\n      <h4>Advantages</h4>\r\n      <div className=\"advantages-container\">\r\n        <ul className=\"advantages-list\">\r\n          {advantages[currentPose].map((instruction) => {\r\n            return <li className=\"advantage\">{instruction}</li>;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/user.f93109cc.png\";","// src/components/AppBar/AppBar.js\r\nimport React, { useState } from \"react\";\r\nimport { FaPowerOff, FaUserCircle } from \"react-icons/fa\"; // Import icons from react-icons\r\nimport userImage from \"../../assets/user.png\";\r\nimport \"./AppBar.css\";\r\n\r\nconst AppBar = ({ username, onLogout }) => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [selectedValue, setSelectedValue] = useState(null); // State to keep track of selected value\r\n\r\n  const handleToggleDropdown = () => {\r\n    setDropdownOpen((prev) => !prev);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    onLogout();\r\n    setDropdownOpen(false); // Close dropdown on logout\r\n  };\r\n\r\n  const handleSelectValue = (value) => {\r\n    setSelectedValue(value); // Set selected value\r\n    setDropdownOpen(false); // Close dropdown after selection\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-bar\">\r\n      <h1>YogaInZ</h1>\r\n      <div className=\"user-container\">\r\n        <img\r\n          src={userImage} // Replace with your user image path\r\n          className=\"user-images\"\r\n          onClick={handleToggleDropdown}\r\n        />\r\n        {dropdownOpen && (\r\n          <div className=\"dropdown\">\r\n            <div className=\"user-info\">\r\n              <span className=\"username\">\r\n                <FaUserCircle className=\"icon\" />\r\n                {username}\r\n              </span>\r\n              <div className=\"divider\" />\r\n              <span\r\n                className={`logout ${\r\n                  selectedValue === \"Logout\" ? \"selected\" : \"\"\r\n                }`}\r\n                onClick={handleLogout}\r\n              >\r\n                <FaPowerOff className=\"icon\" />\r\n                Logout\r\n              </span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppBar;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { poseDescriptions } from \"../../utils/data\";\r\n\r\nimport \"./Descriptions.css\";\r\n\r\nexport default function Descriptions({ currentPose }) {\r\n  const [descriptions, setDescriptions] = useState(poseDescriptions);\r\n\r\n  return (\r\n    <div>\r\n      <h4>Descriptions</h4>\r\n      <div className=\"descriptions-container\">\r\n        <ul className=\"descriptions-list\">\r\n          {descriptions[currentPose].map((description) => {\r\n            return <li className=\"description\">{description}</li>;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport { poseInstructions } from \"../../utils/data\";\r\n\r\nimport \"./Instructions.css\";\r\n\r\nexport default function Instructions({ currentPose }) {\r\n  const [instructions, setInsntructions] = useState(poseInstructions);\r\n\r\n  return (\r\n    <div>\r\n      <h4>Instructions</h4>\r\n      <div className=\"instructions-container\">\r\n        <ul className=\"instructions-list\">\r\n          {instructions[currentPose].map((instruction) => {\r\n            return <li className=\"instruction\">{instruction}</li>;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// src/components/PoseSelector/PoseSelector.js\r\nimport React from \"react\";\r\nimport \"./PoseSelector.css\"; // Ensure this CSS file exists for styling\r\n\r\n// Step 1: Define the mapping from English to Sanskrit names\r\nconst poseNames = {\r\n  Tree: \"Vrksasana\",\r\n  Chair: \"Utkatasana\",\r\n  Cobra: \"Bhujangasana\",\r\n  Warrior: \"Virabhadrasana\",\r\n  Dog: \"Adho Mukha Svanasana\",\r\n  Shoulderstand: \"Sarvangasana\",\r\n  Triangle: \"Trikonasana\",\r\n};\r\n\r\nconst PoseSelector = ({ poseList, currentPose, setCurrentPose }) => {\r\n  return (\r\n    <div className=\"pose-selector\">\r\n      {poseList.map((pose) => (\r\n        <button\r\n          key={pose}\r\n          className={`pose-button ${currentPose === pose ? \"active\" : \"\"}`}\r\n          onClick={() => setCurrentPose(pose)}\r\n        >\r\n          {/* Step 2: Display the Sanskrit name */}\r\n          {poseNames[pose] || pose}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PoseSelector;\r\n","export default __webpack_public_path__ + \"static/media/count.f89c5fa1.wav\";","export default __webpack_public_path__ + \"static/media/chair.f10c11b9.jpg\";","export default __webpack_public_path__ + \"static/media/cobra.fcbccbd9.jpg\";","export default __webpack_public_path__ + \"static/media/dog.551aeeb3.jpg\";","export default __webpack_public_path__ + \"static/media/shoulderstand.784f28f4.jpg\";","export default __webpack_public_path__ + \"static/media/traingle.e09c1851.jpg\";","import chair from \"./chair.jpg\";\r\nimport cobra from \"./cobra.jpg\";\r\nimport dog from \"./dog.jpg\";\r\nimport shoulderstand from \"./shoulderstand.jpg\";\r\nimport traingle from \"./traingle.jpg\";\r\nimport tree from \"./tree.jpg\";\r\nimport warrior from \"./warrior.jpg\";\r\n\r\nexport const poseImages = {\r\n  Tree: tree,\r\n  Cobra: cobra,\r\n  Dog: dog,\r\n  Warrior: warrior,\r\n  Chair: chair,\r\n  Triangle: traingle,\r\n  Shoulderstand: shoulderstand,\r\n};\r\n","export default __webpack_public_path__ + \"static/media/tree.04893f79.jpg\";","export default __webpack_public_path__ + \"static/media/warrior.ad323405.jpg\";","// src/pages/Yoga/Yoga.js\r\nimport * as poseDetection from \"@tensorflow-models/pose-detection\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport Advantages from \"../../components/Advantages/Advantages\";\r\nimport AppBar from \"../../components/AppBar/AppBar\";\r\nimport Descriptions from \"../../components/Descriptions/Descriptions\";\r\nimport Instructions from \"../../components/Instrctions/Instructions\";\r\nimport PoseSelector from \"../../components/PoseSelector/PoseSelector\";\r\nimport { POINTS, keypointConnections } from \"../../utils/data\";\r\nimport { drawPoint, drawSegment } from \"../../utils/helper\";\r\nimport { count } from \"../../utils/music\";\r\nimport { poseImages } from \"../../utils/pose_images\";\r\nimport \"./Yoga.css\";\r\n\r\nlet skeletonColor = \"rgb(255,255,255)\";\r\nlet poseList = [\r\n  \"Tree\",\r\n  \"Chair\",\r\n  \"Cobra\",\r\n  \"Warrior\",\r\n  \"Dog\",\r\n  \"Shoulderstand\",\r\n  \"Triangle\",\r\n];\r\n\r\nlet interval;\r\nlet flag = false;\r\n\r\nfunction Yoga() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const [startingTime, setStartingTime] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [poseTime, setPoseTime] = useState(0);\r\n  const [bestPerform, setBestPerform] = useState(0);\r\n  const [currentPose, setCurrentPose] = useState(\"Tree\");\r\n  const [isStartPose, setIsStartPose] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timeDiff = (currentTime - startingTime) / 1000;\r\n    if (flag) {\r\n      setPoseTime(timeDiff);\r\n    }\r\n    if (timeDiff > bestPerform) {\r\n      setBestPerform(timeDiff);\r\n    }\r\n  }, [currentTime]);\r\n\r\n  useEffect(() => {\r\n    setCurrentTime(0);\r\n    setPoseTime(0);\r\n    setBestPerform(0);\r\n  }, [currentPose]);\r\n\r\n  const CLASS_NO = {\r\n    Chair: 0,\r\n    Cobra: 1,\r\n    Dog: 2,\r\n    No_Pose: 3,\r\n    Shoulderstand: 4,\r\n    Triangle: 5,\r\n    Tree: 6,\r\n    Warrior: 7,\r\n  };\r\n\r\n  function get_center_point(landmarks, left_bodypart, right_bodypart) {\r\n    let left = tf.gather(landmarks, left_bodypart, 1);\r\n    let right = tf.gather(landmarks, right_bodypart, 1);\r\n    const center = tf.add(tf.mul(left, 0.5), tf.mul(right, 0.5));\r\n    return center;\r\n  }\r\n\r\n  function get_pose_size(landmarks, torso_size_multiplier = 2.5) {\r\n    let hips_center = get_center_point(\r\n      landmarks,\r\n      POINTS.LEFT_HIP,\r\n      POINTS.RIGHT_HIP\r\n    );\r\n    let shoulders_center = get_center_point(\r\n      landmarks,\r\n      POINTS.LEFT_SHOULDER,\r\n      POINTS.RIGHT_SHOULDER\r\n    );\r\n    let torso_size = tf.norm(tf.sub(shoulders_center, hips_center));\r\n    let pose_center_new = get_center_point(\r\n      landmarks,\r\n      POINTS.LEFT_HIP,\r\n      POINTS.RIGHT_HIP\r\n    );\r\n    pose_center_new = tf.expandDims(pose_center_new, 1);\r\n\r\n    pose_center_new = tf.broadcastTo(pose_center_new, [1, 17, 2]);\r\n    let d = tf.gather(tf.sub(landmarks, pose_center_new), 0, 0);\r\n    let max_dist = tf.max(tf.norm(d, \"euclidean\", 0));\r\n\r\n    let pose_size = tf.maximum(\r\n      tf.mul(torso_size, torso_size_multiplier),\r\n      max_dist\r\n    );\r\n    return pose_size;\r\n  }\r\n\r\n  function normalize_pose_landmarks(landmarks) {\r\n    let pose_center = get_center_point(\r\n      landmarks,\r\n      POINTS.LEFT_HIP,\r\n      POINTS.RIGHT_HIP\r\n    );\r\n    pose_center = tf.expandDims(pose_center, 1);\r\n    pose_center = tf.broadcastTo(pose_center, [1, 17, 2]);\r\n    landmarks = tf.sub(landmarks, pose_center);\r\n\r\n    let pose_size = get_pose_size(landmarks);\r\n    landmarks = tf.div(landmarks, pose_size);\r\n    return landmarks;\r\n  }\r\n\r\n  function landmarks_to_embedding(landmarks) {\r\n    landmarks = normalize_pose_landmarks(tf.expandDims(landmarks, 0));\r\n    let embedding = tf.reshape(landmarks, [1, 34]);\r\n    return embedding;\r\n  }\r\n\r\n  const runMovenet = async () => {\r\n    const detectorConfig = {\r\n      modelType: poseDetection.movenet.modelType.SINGLEPOSE_THUNDER,\r\n    };\r\n    const detector = await poseDetection.createDetector(\r\n      poseDetection.SupportedModels.MoveNet,\r\n      detectorConfig\r\n    );\r\n    const poseClassifier = await tf.loadLayersModel(\r\n      \"https://models.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json\"\r\n    );\r\n    const countAudio = new Audio(count);\r\n    countAudio.loop = true;\r\n    interval = setInterval(() => {\r\n      detectPose(detector, poseClassifier, countAudio);\r\n    }, 100);\r\n  };\r\n\r\n  const detectPose = async (detector, poseClassifier, countAudio) => {\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      let notDetected = 0;\r\n      const video = webcamRef.current.video;\r\n      const pose = await detector.estimatePoses(video);\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n      try {\r\n        const keypoints = pose[0].keypoints;\r\n        let input = keypoints.map((keypoint) => {\r\n          if (keypoint.score > 0.4) {\r\n            if (\r\n              !(keypoint.name === \"left_eye\" || keypoint.name === \"right_eye\")\r\n            ) {\r\n              drawPoint(ctx, keypoint.x, keypoint.y, 8, \"rgb(255,255,255)\");\r\n              let connections = keypointConnections[keypoint.name];\r\n              try {\r\n                connections.forEach((connection) => {\r\n                  let conName = connection.toUpperCase();\r\n                  drawSegment(\r\n                    ctx,\r\n                    [keypoint.x, keypoint.y],\r\n                    [\r\n                      keypoints[POINTS[conName]].x,\r\n                      keypoints[POINTS[conName]].y,\r\n                    ],\r\n                    skeletonColor\r\n                  );\r\n                });\r\n              } catch (err) {}\r\n            }\r\n          } else {\r\n            notDetected += 1;\r\n          }\r\n          return [keypoint.x, keypoint.y];\r\n        });\r\n        if (notDetected > 4) {\r\n          skeletonColor = \"rgb(255,255,255)\";\r\n          return;\r\n        }\r\n        const processedInput = landmarks_to_embedding(input);\r\n        const classification = poseClassifier.predict(processedInput);\r\n\r\n        classification.array().then((data) => {\r\n          const classNo = CLASS_NO[currentPose];\r\n          console.log(data[0][classNo]);\r\n          if (data[0][classNo] > 0.97) {\r\n            if (!flag) {\r\n              countAudio.play();\r\n              setStartingTime(new Date(Date()).getTime());\r\n              flag = true;\r\n            }\r\n            setCurrentTime(new Date(Date()).getTime());\r\n            skeletonColor = \"rgb(0,255,0)\";\r\n          } else {\r\n            flag = false;\r\n            skeletonColor = \"rgb(255,255,255)\";\r\n            countAudio.pause();\r\n            countAudio.currentTime = 0;\r\n          }\r\n        });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  function startYoga() {\r\n    setIsStartPose(true);\r\n    runMovenet();\r\n  }\r\n\r\n  function stopPose() {\r\n    setIsStartPose(false);\r\n    clearInterval(interval);\r\n  }\r\n  const username = \"Sheromi\";\r\n  const handleLogout = () => {\r\n    // Navigate to the login page (update with your navigation logic)\r\n    window.location.href = \"/\"; // Example navigation\r\n  };\r\n\r\n  if (isStartPose) {\r\n    return (\r\n      <div>\r\n        <AppBar username={username} onLogout={handleLogout} />{\" \"}\r\n        <div className=\"yoga-container\">\r\n          {/* Include the AppBar here */}\r\n          <div className=\"performance-container\">\r\n            <div className=\"pose-performance\">\r\n              <h4>Pose Time: {poseTime.toFixed(2)} s</h4>\r\n            </div>\r\n            <div className=\"pose-performance\">\r\n              <h4>Best: {bestPerform.toFixed(2)} s</h4>\r\n            </div>\r\n          </div>\r\n          <div className=\"webcam-canvas-container\">\r\n            <Webcam\r\n              width=\"640px\"\r\n              height=\"480px\"\r\n              ref={webcamRef}\r\n              className=\"webcam\"\r\n              style={{\r\n                position: \"absolute\",\r\n                top: 0,\r\n                left: 0,\r\n                padding: \"0px\",\r\n              }}\r\n            />\r\n            <canvas\r\n              ref={canvasRef}\r\n              width=\"640px\"\r\n              height=\"480px\"\r\n              className=\"canvas\"\r\n              style={{\r\n                position: \"absolute\",\r\n                top: 0,\r\n                left: 0,\r\n              }}\r\n            ></canvas>\r\n          </div>\r\n          <div>\r\n            <img\r\n              src={poseImages[currentPose]}\r\n              alt={currentPose}\r\n              className=\"pose-img\"\r\n            />\r\n          </div>\r\n          <button onClick={stopPose} className=\"secondary-btn\">\r\n            Stop Pose\r\n          </button>\r\n          <Descriptions currentPose={currentPose} />\r\n          <Instructions currentPose={currentPose} />\r\n          <Advantages currentPose={currentPose} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <AppBar username={username} onLogout={handleLogout} />{\" \"}\r\n      <div className=\"yoga-container\">\r\n        {/* Include the AppBar here */}\r\n        <h2>Select Your Pose</h2>\r\n        <PoseSelector\r\n          poseList={poseList}\r\n          currentPose={currentPose}\r\n          setCurrentPose={setCurrentPose}\r\n        />\r\n        {/* <Instructions /> */}\r\n        <div>\r\n          <img\r\n            src={poseImages[currentPose]}\r\n            alt={currentPose}\r\n            className=\"pose-img\"\r\n          />\r\n        </div>\r\n        <button onClick={startYoga} className=\"primary-btn\">\r\n          Start\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Yoga;\r\n","\r\nexport function drawSegment(ctx, [mx, my], [tx, ty], color) {\r\n    ctx.beginPath()\r\n    ctx.moveTo(mx, my)\r\n    ctx.lineTo(tx, ty)\r\n    ctx.lineWidth = 5\r\n    ctx.strokeStyle = color\r\n    ctx.stroke()\r\n}\r\n\r\nexport function drawPoint(ctx, x, y, r, color) {\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, r, 0, 2 * Math.PI);\r\n    ctx.fillStyle = color;\r\n    ctx.fill();\r\n}","import React from \"react\";\nimport { Route, BrowserRouter as Router, Routes } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Login from \"./pages/Login/Login\";\nimport Yoga from \"./pages/Yoga/Yoga\";\n\nexport default function App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Login />} />\n        <Route path=\"/start\" element={<Yoga />} />\n      </Routes>\n    </Router>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}